name: Bump version on push

on:
  push:
    branches:
      - main  # oder dein gewÃ¼nschter Branch

jobs:
  bump-version:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.SSH_DEPLOY_KEY }}

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"        

      - name: Stop if last commit is from GitHub Actions (avoid infinite loop)
        run: |
          LAST_COMMIT_AUTHOR="$(git log -1 --pretty=format:'%an')"
          echo "Last commit author: $LAST_COMMIT_AUTHOR"
          if [ "$LAST_COMMIT_AUTHOR" = "github-actions[bot]" ]; then
            echo "Commit was made by GitHub Action, skipping..."
            exit 0
          fi

      - name: Get current version
        id: get_version
        run: |
          # Lese die erste Zeile, die typischerweise mit "## v" beginnt
          # Beispiel: "## v1.2.3 - 2025-01-21"
          CURRENT_VERSION="$(grep -m1 '^## v' VERSIONS.md | sed -E 's/^## v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')"
          
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Konnte keine Version in VERSIONS.md finden - ggf. Default auf 0.0.0"
            CURRENT_VERSION="0.0.0"
          fi

          echo "Aktuelle Version ist: $CURRENT_VERSION"
          echo "::set-output name=current_version::$CURRENT_VERSION"

      - name: Determine new version
        id: determine_new_version
        run: |
          if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
            # Get the commits from the last push
            COMMITS="$(git log --pretty=format:%B HEAD~1..HEAD)"
          else
            COMMITS="$(git log --pretty=format:%B HEAD)"
          fi
          echo "Commit Messages:"
          echo "$COMMITS"
      
          CURRENT_VERSION="${{ steps.get_version.outputs.current_version }}"
          MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
          MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
          PATCH=$(echo "$CURRENT_VERSION" | cut -d. -f3)
      
          # Check for major release tag
          if echo "$COMMITS" | grep -q "<major_release></major_release>"; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            RELEASE_TYPE="(MAJOR)"
          else
            PATCH=$((PATCH + 1))
            RELEASE_TYPE="(PATCH)"
          fi
      
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION $RELEASE_TYPE"
          echo "::set-output name=new_version::$NEW_VERSION"
          
          # Collect commit messages as release notes
          echo "::set-output name=release_notes::$COMMITS"

      - name: Update VERSIONS.md
        run: |
          NEW_VERSION="${{ steps.determine_new_version.outputs.new_version }}"
          RELEASE_NOTES="${{ steps.determine_new_version.outputs.release_notes }}"
          DATE="$(date +'%Y-%m-%d')"

          # Schreibe den neuen Block an den Anfang von VERSIONS.md
          # Format:
          # ## v<new_version> - 2025-01-21
          # - commit 1
          # - commit 2
          # ...
          {
            echo "## v${NEW_VERSION} - ${DATE}"
            echo ""
            while IFS= read -r line; do
              echo "- $line"
            done <<< "$RELEASE_NOTES"
            echo ""
          } > NEW_VERSIONS.md

          cat VERSIONS.md >> NEW_VERSIONS.md
          mv NEW_VERSIONS.md VERSIONS.md

          echo "VERSIONS.md aktualisiert:"
          head -n 20 VERSIONS.md

      - name: (Optional) Update README.md
        run: |
          NEW_VERSION="${{ steps.determine_new_version.outputs.new_version }}"

          # Beispiel: Ersetze in README.md einen Platzhalter VERSION_PLACEHOLDER durch neue Version
          # Oder aktualisiere eine Badge etc.
          sed -i "s/VERSION_PLACEHOLDER/${NEW_VERSION}/g" README.md || true

          echo "README.md aktualisiert (falls Platzhalter gefunden)."
      
      - name: Commit changes
        run: |
          git add .
          git commit -m "chore: bump version to ${{ steps.bump_version.outputs.new_version }}"

      - name: Push changes
        run: |
          git push origin main
