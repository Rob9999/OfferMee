name: Bump version on push

on:
  push:
    branches:
      - main

jobs:
  bump-version:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          # Voraussetzung: Du hast ein Deploy-Key in deinem Repo hinterlegt,
          # der auch 'Write Access' hat.
          ssh-key: ${{ secrets.SSH_DEPLOY_KEY }}

      - name: Configure Git
        run: |
          # Konfiguriert Name/Email für Commits,
          # damit wir diese Commits identifizieren können.
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Stop if last commit is from GitHub Actions (avoid infinite loop)
        run: |
          # Holt die E-Mail-Adresse des letzten Commits
          LAST_COMMIT_AUTHOR_EMAIL="$(git log -1 --pretty=format:'%ae')"
          echo "Last commit author email: $LAST_COMMIT_AUTHOR_EMAIL"
          # Ist diese E-Mail == GitHub Actions? Dann Abbruch
          if [ "$LAST_COMMIT_AUTHOR_EMAIL" = "41898282+github-actions[bot]@users.noreply.github.com" ]; then
            echo "Commit was made by GitHub Action, skipping..."
            exit 0
          fi

      - name: Get current version
        id: get_version
        run: |
          # Versuche die Zeile zu finden, die mit '## v' beginnt, z.B. "## v1.2.3 - 2025-01-21"
          CURRENT_VERSION="$(grep -m1 '^## v' VERSIONS.md | sed -E 's/^## v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')"
          
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Keine Version in VERSIONS.md gefunden - default=0.0.0"
            CURRENT_VERSION="0.0.0"
          fi
          
          echo "Aktuelle Version: $CURRENT_VERSION"
          echo "::set-output name=current_version::$CURRENT_VERSION"

      - name: Determine new version
        id: determine_new_version
        run: |
          # Wenn HEAD~1 existiert (also es gibt mindestens einen Vorgänger-Commit):
          if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
            # Commit-Messages seit dem letzten Commit
            COMMITS="$(git log --pretty=format:%B HEAD~1..HEAD)"
          else
            # Falls einziger Commit
            COMMITS="$(git log --pretty=format:%B HEAD)"
          fi
          
          echo "Commit Messages:"
          echo "$COMMITS"
      
          CURRENT_VERSION="${{ steps.get_version.outputs.current_version }}"
          
          # Zerlege MAJOR.MINOR.PATCH
          MAJOR=$(echo "$CURRENT_VERSION" | cut -d. -f1)
          MINOR=$(echo "$CURRENT_VERSION" | cut -d. -f2)
          PATCH=$(echo "$CURRENT_VERSION" | cut -d. -f3)
      
          # Suche im Commit-Text nach einem speziellen Tag <major_release></major_release>
          if echo "$COMMITS" | grep -q "<major_release></major_release>"; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            RELEASE_TYPE="(MAJOR)"
          else
            PATCH=$((PATCH + 1))
            RELEASE_TYPE="(PATCH)"
          fi
      
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "Neue Version: $NEW_VERSION $RELEASE_TYPE"
          echo "::set-output name=new_version::$NEW_VERSION"
          
          # Release Notes sind einfach die Commit-Messages
          echo "::set-output name=release_notes::$COMMITS"

      - name: Update VERSIONS.md with new version
        run: |
          NEW_VERSION="${{ steps.determine_new_version.outputs.new_version }}"
          RELEASE_NOTES="${{ steps.determine_new_version.outputs.release_notes }}"

          # Erzeuge einen ISO8601 UTC-Zeitstempel (z.B. 2025-01-23T18:20:02.123Z)
          DATE="$(date -u +'%Y-%m-%dT%H:%M:%S.%3NZ')"

          # Schreibe einen neuen Abschnitt an den Anfang von VERSIONS.md
          {
            echo "## v${NEW_VERSION} - ${DATE}"
            echo ""
            while IFS= read -r line; do
              echo "- $line"
            done <<< "$RELEASE_NOTES"
            echo ""
          } > NEW_VERSIONS.md

          cat VERSIONS.md >> NEW_VERSIONS.md
          mv NEW_VERSIONS.md VERSIONS.md

      - name: (Optional) Update README.md
        run: |
          NEW_VERSION="${{ steps.determine_new_version.outputs.new_version }}"
          # Zeile "## Version 0.0.1" ersetzen durch z.B. "## Version 1.2.3"
          sed -i "s|^## Version .*|## Version ${NEW_VERSION}|" README.md
          # Zeile "**Date:** 2024-12-17" ersetzen durch z.B. "**Date:** 2025-01-23T18:20:02.123Z"
          sed -i "s|^\*\*Date:\*\* .*|**Date:** ${DATE}|" README.md         
          echo "README.md (falls Platzhalter vorhanden) aktualisiert."

      - name: Commit changes
        run: |
          NEW_VERSION="${{ steps.determine_new_version.outputs.new_version }}"
          git add .
          git commit -m "chore: bump version to ${NEW_VERSION}"

      - name: Push changes
        run: |
          # Push auf main (oder ggf. ein anderer Branch)
          git push origin main
